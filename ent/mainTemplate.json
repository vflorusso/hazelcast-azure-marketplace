{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUserName": {
      "type": "string",
      "metadata": {
        "description": "Username for hazelcast VMs"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for hazelcast VMs, if authenticationType is set to 'password'"
      }
    },
    "sshPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "SSH Public key for hazelcast VMs, if authenticationType is set to 'sshPublicKey'"
      }
    },
    "authenticationType": {
      "type": "string",
      "metadata": {
        "description": "Authentication method for logging into Hazelcast VMs."
      },
      "allowedValues": [
        "password",
        "sshPublicKey"
      ]
    },
    "licenseKey":{
      "type": "string",
      "metadata": {
        "description": "License Key for Enterprise to be installed. For a trial key: https://hazelcast.com/hazelcast-enterprise-download/trial/"
      }
    },
    "manCenterURL":{
      "type": "string",
      "metadata": {
        "description": "The URL this cluster will use to connect to Management Center."
      }
    },
    "clusterVersion": {
      "type": "string",
      "metadata": {
        "description": "Hazelcast Version to deploy."
      }
    },
    "customJar": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Customer provided jar file."
      }
    },
    "clusterUserName": {
      "type": "string",
      "metadata": {
        "description": "Username for hazelcast grid"
      },
      "defaultValue": "[parameters('adminUserName')]"
    },
    "clusterPassword": {
      "type": "string",
      "metadata": {
        "description": "Password for hazelcast grid"
      }
    },
    "dnsPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
      }
    },
    "instanceCount": {
      "type": "int",
      "metadata": {
        "description": "The number of hazelcast nodes in the grid"
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "The size of each instance VM"
      }
    },
    "ubuntuOSVersion": {
      "type": "string",
      "defaultValue": "14.04.2-LTS",
      "metadata": {
        "description": "The Ubuntu version for deploying the Docker containers. This will pick a fully patched image of this given Ubuntu version. Allowed values: 14.04.2-LTS, 14.04, 16.04.0-LTS"
      }
    },
    "storageAccountNewOrExisting": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": ""
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": ""
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": ""
      }
    },
    "existingStorageAccountRG": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": ""
      }
    },
    "publicIPAddressName": {
      "type": "string"
    },
    "publicIPNewOrExisting": {
      "type": "string"
    },
    "location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": ""
      }
    },
    "templateBaseUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/hazelcast/hazelcast-azure-marketplace/master/ent",
      "metadata": {
        "description": "The base URL for the bootstrap files",
        "artifactsBaseUrl": "Base URL to be replaced by marketplace storage."
      }
    }
  },
  "variables": {
    "imagePublisher": "Canonical",
    "newStorageAccountName": "[concat(uniqueString(resourceGroup().id), 'hazelcast')]",
    "imageOffer": "UbuntuServer",
    "OSDiskName": "hazelcastosdisk",
    "nicName": "myVMNic",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet",
    "subnetPrefix": "10.0.1.0/24",
    "storageAccountType": "Standard_LRS",
    "publicIPAddressName": "[parameters('publicIPAddressName')]",
    "publicIPAddressType": "Dynamic",
    "vmStorageAccountContainerName": "vhds",
    "vmName": "hazelcast",
    "virtualNetworkName": "hazelcastVNet",
    "osProfile": "[variables(concat('osProfile', parameters('authenticationType')))]",
    "osProfilepassword": {
      "adminPassword": "[parameters('adminPassword')]",
      "adminUsername": "[parameters('adminUsername')]",
      "computerName": "[variables('vmName')]"
    },
    "osProfilesshPublicKey": {
      "adminUsername": "[parameters('adminUsername')]",
      "computerName": "[variables('vmName')]",
      "linuxConfiguration": {
        "disablePasswordAuthentication": "true",
        "ssh": {
          "publicKeys": [
            {
              "keyData": "[parameters('sshPublicKey')]",
	      "path": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]"
            }
          ]
        }
      }
    },
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "ComputeapiVersion": "2016-03-30",
    "NetworkapiVersion": "2016-10-01",
    "StorageapiVersion": "2016-05-01",
    "bootstrapFiles": [
      "[concat(parameters('templateBaseUrl'), '/bootstrap_hazelcast')]",
      "[concat(parameters('templateBaseUrl'), '/hazelcast')]",
      "[concat(parameters('templateBaseUrl'), '/hazelcast-server.conf')]",
      "[concat(parameters('templateBaseUrl'), '/hazelcast-server.service')]",
      "[concat(parameters('templateBaseUrl'), '/hazelcast.xml')]",
      "[concat(parameters('templateBaseUrl'), '/install_hazelcast')]",
      "[concat(parameters('templateBaseUrl'), '/download')]",
      "[concat(parameters('templateBaseUrl'), '/hazelcast-server.conf')]",
      "[concat(parameters('templateBaseUrl'), '/logging.properties')]",
      "[concat(parameters('templateBaseUrl'), '/modify_configuration')]",
      "[concat(parameters('templateBaseUrl'), '/pom.xml')]"
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('newStorageAccountName')]",
      "apiVersion": "[variables('StorageapiVersion')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "kind": "Storage"
    },
    {
      "apiVersion": "[variables('NetworkapiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsPrefix')]"
        }
      }
    },
    {
      "apiVersion": "[variables('NetworkapiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('NetworkapiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'), '0')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.1.0.2",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('NetworkapiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'), copyIndex(1))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat('10.1.0.',string(copyIndex(3)))]",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      },
      "copy": {
        "name": "createNics",
        "count": "[sub(parameters('instanceCount'), 1)]"
      }
    },
    {
      "apiVersion": "[variables('ComputeapiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmName'), '0')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), '0')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": "[variables('osProfile')]",
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk1",
            "vhd": {
              "uri": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'), '0', '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), '0'))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[variables('ComputeapiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmName'), copyIndex(1))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), copyIndex(1))]",
        "createNics"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": "[variables('osProfile')]",
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk1",
            "vhd": {
              "uri": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'), copyIndex(), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), copyIndex(1)))]"
            }
          ]
        }
      },
      "copy": {
        "name": "createVms",
        "count": "[sub(parameters('instanceCount'), 1)]"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'), copyIndex(),'/initHazelcast')]",
      "apiVersion": "[variables('ComputeapiVersion')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "createVms",
        "[concat('Microsoft.Compute/virtualMachines/',variables('vmName'), '0')]"
      ],
      "properties": {
        "autoUpgradeMinorVersion": true,
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "2.0",
        "settings": {
          "fileUris": "[variables('bootstrapFiles')]"
        },
        "protectedSettings": {
          "commandToExecute": "[concat('sh bootstrap_hazelcast ', parameters('clusterUserName'), ' ', parameters('clusterPassword'), ' ', parameters('clusterVersion'), ' ', parameters('instanceCount'), ' ', parameters('licenseKey'), ' ', parameters('manCenterURL'), ' ', parameters('customJar') )]"
        }
      },
      "copy": {
        "name": "createExtensions",
        "count": "[parameters('instanceCount')]"
      }
    }
  ]
}
