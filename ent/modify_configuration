#! /usr/bin/python
from _io import open
from xml import dom
from xml import sax
from xml import *
from xml.etree.ElementTree import QName
import xml.etree.cElementTree as ET
import optparse
from optparse import OptionParser
import sys

filename = " "

if __name__ == "__main__":

    parser = OptionParser()
    parser.add_option("-k","--license-key",dest="license_key") 
    parser.add_option("-u","--man-url",dest="mancenter_url") 
    parser.add_option("-n","--cluster-name",dest="cluster_name") 
    parser.add_option("-p","--cluster-password",dest="cluster_password")
    parser.add_option("-v","--cluster-version",dest="cluster_version")
    parser.add_option("-z","--cluster-size",dest="cluster_size")

    parser.add_option("-f","--filename",dest="filename")
    if len(sys.argv) > 0:
        opts,args = parser.parse_args(sys.argv)
        ## Opening the hazelcast.xml file
        try:
            ## f = open(opts.filename)
            ## Registering default namespace
            hazelcast_ns = "http://www.hazelcast.com/schema/config"
            ET.register_namespace('', hazelcast_ns)
            ns = {'hazelcast_ns': hazelcast_ns}
            ## Loading the root parser
            tree = ET.parse(opts.filename)    
            root = tree.getroot()
           
	    # update license key
            for key in root.iter(str(QName(hazelcast_ns, "license-key"))):
                key.text = opts.license_key
            print("Updated license key...") 

            # update management center url
            if opts.mancenter_url:
                for key in root.iter(str(QName(hazelcast_ns, "management-center"))):
                    key.set('enabled', 'true')
                    key.text = opts.mancenter_url
                print("Updated management center url...")
            

	    ## Finding and replacing the old group tag with the new one
            for group in root.iter(str(QName(hazelcast_ns, "group"))):
                group.find("hazelcast_ns:name", ns).text = opts.cluster_name
                group.find("hazelcast_ns:password", ns).text = opts.cluster_password
            print("Updated cluster user name and password...")
            
            ################################################################
			## add the list of ip addresses to the members element
            print("Updating list of ip nodes...")
            for tcpList in root.iter(str(QName(hazelcast_ns, "members"))):
				print(tcpList.text)
				ipList = ''
				for addingIP in xrange(int(opts.cluster_size)):
					ipAddy = '10.0.1.'+str(4+addingIP)
					ipList += ipAddy
					if addingIP < (int(opts.cluster_size) - 1):
						ipList += ','
				print(ipList)
				tcpList.text = ipList
            print("Updated list of ip nodes...")
            ################################################################
        
            tree.write(opts.filename)
            print("Updating configuration file suceeded , file updated and saved at " + opts.filename)
        except IOError as e:
            print("Unable to open configuration file, I/O error ({0}) : {1}".format(e.errno, e.strerror))
                   
    else:
        print("Script exited without executing, no input parameters found")

